<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AmbiguousCallOfFunction" xml:space="preserve">
    <value>Ambiguous call of function '{0}({1})'</value>
  </data>
  <data name="AmbiguousOverloadedOperator" xml:space="preserve">
    <value>Ambiguous overloaded operator ('{2}') in types '{0}' and '{1}'</value>
  </data>
  <data name="ANALYSIS" xml:space="preserve">
    <value>Analysis: {0}</value>
  </data>
  <data name="ArrayIndexersMustBeOfType" xml:space="preserve">
    <value>Array indexers must be of type '{0}'</value>
  </data>
  <data name="CalcEngineDoesNotContainAtom" xml:space="preserve">
    <value>The calculation engine does not contain the atom '${0}'</value>
  </data>
  <data name="CannotConvertType" xml:space="preserve">
    <value>Cannot convert type '{0}' to '{1}'</value>
  </data>
  <data name="CannotConvertTypeToExpressionResult" xml:space="preserve">
    <value>Cannot convert type '{0}' to expression result of '{1}'</value>
  </data>
  <data name="CannotParseType" xml:space="preserve">
    <value>String was not recognized as a valid '{0}'</value>
  </data>
  <data name="CannotReferenceCalcEngineAtomWithoutCalcEngine" xml:space="preserve">
    <value>Cannot reference a calculation engine atom without a calculation engine</value>
  </data>
  <data name="CouldNotResolveType" xml:space="preserve">
    <value>Could not resolve type of '{0}'</value>
  </data>
  <data name="FirstArgNotBoolean" xml:space="preserve">
    <value>First argument does not evaluate to a Boolean</value>
  </data>
  <data name="FunctionHasNoReturnValue" xml:space="preserve">
    <value>Function '{0}' does not return a value</value>
  </data>
  <data name="IdentifierIsAmbiguous" xml:space="preserve">
    <value>The field/property/variable name '{0}' is ambiguous</value>
  </data>
  <data name="IdentifierIsAmbiguousOnType" xml:space="preserve">
    <value>The field/property/variable name '{0}' is ambiguous on type '{1}'</value>
  </data>
  <data name="INTERNAL_ERROR" xml:space="preserve">
    <value>Internal error: {0}</value>
  </data>
  <data name="INVALID_TOKEN" xml:space="preserve">
    <value>Invalid Token: {0}</value>
  </data>
  <data name="IO" xml:space="preserve">
    <value>I/O error: {0}</value>
  </data>
  <data name="LineColumn" xml:space="preserve">
    <value>Line: {0}, Column: {1}</value>
  </data>
  <data name="MultiArrayIndexNotSupported" xml:space="preserve">
    <value>Multiple array indexes are not supported</value>
  </data>
  <data name="NamespaceCannotBeUsedAsType" xml:space="preserve">
    <value>Namespace '{0}' cannot be used as a type</value>
  </data>
  <data name="NeitherArgIsConvertibleToTheOther" xml:space="preserve">
    <value>Cannot determine result type of expression; neither the True ({0}) or False ({1}) arguments are convertible to one another</value>
  </data>
  <data name="NoAccessibleMatches" xml:space="preserve">
    <value>Could not find any accessible matches for '{0}({1})'</value>
  </data>
  <data name="NoAccessibleMatchesOnType" xml:space="preserve">
    <value>Could not find any accessible matches for '{0}({1})' on type '{2}'</value>
  </data>
  <data name="NoIdentifierWithName" xml:space="preserve">
    <value>Could not find a field/property/variable with the name '{0}'</value>
  </data>
  <data name="NoIdentifierWithNameOnType" xml:space="preserve">
    <value>Could not find a field/property/variable with the name '{0}' on the type '{1}'</value>
  </data>
  <data name="OperandNotConvertibleToCollectionType" xml:space="preserve">
    <value>Operand type of '{0}' is not convertible to collection type of '{1}'</value>
  </data>
  <data name="OperationNotDefinedForType" xml:space="preserve">
    <value>Operation not defined for type '{0}'</value>
  </data>
  <data name="OperationNotDefinedForTypes" xml:space="preserve">
    <value>Operation '{0}' is not defined for types '{1}' and '{2}'</value>
  </data>
  <data name="ReferenceToNonSharedMemberRequiresObjectReference" xml:space="preserve">
    <value>Reference to a non-shared member '{0}' requires an object reference</value>
  </data>
  <data name="SearchArgIsNotKnownCollectionType" xml:space="preserve">
    <value>Search argument type '{0}' is not a known collection type</value>
  </data>
  <data name="StaticMemberCannotBeAccessedWithInstanceReference" xml:space="preserve">
    <value>Static member '{0}' cannot be accessed with an instance reference; qualify it with a type name instead</value>
  </data>
  <data name="SyntaxError" xml:space="preserve">
    <value>SyntaxError</value>
  </data>
  <data name="TypeCannotBeUsedAsAnExpression" xml:space="preserve">
    <value>'{0}' is a type and cannot be used as an expression</value>
  </data>
  <data name="TypeNotArrayAndHasNoIndexerOfType" xml:space="preserve">
    <value>Type '{0}' is not an array and does not have an indexer which accepts '{1}'</value>
  </data>
  <data name="UndefinedFunction" xml:space="preserve">
    <value>Could not find function '{0}({1})'</value>
  </data>
  <data name="UndefinedFunctionOnType" xml:space="preserve">
    <value>Could not find function '{0}({1})' on type '{2}'</value>
  </data>
  <data name="UNEXPECTED_CHAR" xml:space="preserve">
    <value>Unexpected character: {0}</value>
  </data>
  <data name="UNEXPECTED_EOF" xml:space="preserve">
    <value>Unexpected end of file</value>
  </data>
  <data name="UNEXPECTED_TOKEN" xml:space="preserve">
    <value>Unexpected token {0}; expected one of {1}</value>
  </data>
  <data name="ValueNotRepresentableInType" xml:space="preserve">
    <value>'{0}' not representable in type '{1}'</value>
  </data>
</root>